pipeline {

    options {
        timestamps()
        parallelsAlwaysFailFast()
        disableConcurrentBuilds()
    }

    agent {
        node {
            label "cloud-ccp-ci"
        }
    }

    parameters {
        /* first value in the list is the default */
        choice(choices: ['airship', 'osh'], description: 'Which deployment mechanism?', name: 'deployment')
    }

    environment {
        /* use lowercase SOCOK8S_ENVNAME. CaaSP Velum doesn't like it otherwise */
        SOCOK8S_ENVNAME = "cloud-socok8s-${env.BRANCH_NAME.toLowerCase()}-${env.BUILD_NUMBER}"
        OS_CLOUD = "engcloud-cloud-ci"
        KEYNAME = "engcloud-cloud-ci"
        DELETE_ANYWAY = "YES"
        SOCOK8S_DEVELOPER_MODE = "True"
        DEPLOYMENT_MECHANISM = "openstack"
        ANSIBLE_STDOUT_CALLBACK = "yaml"
        USER = "jenkins" /* Why isn't this set in the jenkins environment? */
    }

    stages {
        stage('Show environment information') {
            steps {
                sh 'printenv'
            }
        }

        stage('Create network') {
            options {
                timeout(time: 10, unit: 'MINUTES', activity: true)
            }
            steps {
                sh "./run.sh deploy_network"
            }
        }
        stage('Create VMs') {
            options {
                timeout(time: 20, unit: 'MINUTES', activity: true)
            }
            parallel {
                stage('Deploy CaaSP') {
                    steps {
                        sh "./run.sh deploy_caasp"
                    }
                }
                stage('Deploy SES') {
                    steps {
                        sh "./run.sh deploy_ses"
                    }
                }
                stage('Deploy CCP Deployer') {
                    steps {
                        sh "./run.sh deploy_ccp_deployer"
                    }
                }
            }
        }

        stage('Configure CaaSP workers') {
            options {
                timeout(time: 15, unit: 'MINUTES', activity: true)
            }
            steps {
                sh "./run.sh enroll_caasp_workers"
                sh "./run.sh setup_caasp_workers_for_openstack"
            }
        }

        stage('Deploy') {
            options {
                timeout(time: 30, unit: 'MINUTES', activity: true)
            }
            parallel {
		stage('Deploy OpenStack Helm') {
		    when {
			expression { params.deployment == "osh" }
		    }
		    steps {
			sh "./run.sh patch_upstream"
			sh "./run.sh build_images"
			sh "./run.sh deploy_osh"
		    }
		}

		stage('Deploy Airship') {
		    when {
			expression { params.deployment == "airship" }
		    }
		    steps {
			sh "./run.sh setup_airship"
		    }
		}
            }
        }
    }

    post {
        failure {
            script {
                if (env.hold_instance_for_debug == 'true') {
                    echo "You can reach this node by connecting to its floating IP as root user, with the default password of your image."
                    timeout(time: 3, unit: 'HOURS') {
                        input(message: "Waiting for input before deleting  env ${SOCOK8S_ENVNAME}.")
                    }
                }
            }
            script {
                sh './run.sh gather_logs'
            }
            zip archive: true, dir: 'logs/', zipFile: 'logs.zip'
            archiveArtifacts artifacts: 'logs.zip'
        }
        cleanup {
            script {
                    sh './run.sh teardown'
                }
        }
    }
}
