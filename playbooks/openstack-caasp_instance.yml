---
- hosts: localhost
  gather_facts: no
  connection: local
  vars:
    stackname_suffix: "caasp"
  tasks:
    - name: Load generic vars
      include_vars: "{{ playbook_dir }}/../vars/common-vars.yml"
    - name: Load openstack vars
      include_vars: "{{ playbook_dir }}/../vars/deploy-on-openstack.yml"

    - name: Define stackname to create
      set_fact:
        stackname: "{{ socok8s_envname }}-{{ stackname_suffix }}"

    - name: Handle creation if not exists
      block:
        - name: Create stack
          os_stack:
            cloud: "{{ deploy_on_openstack_cloudname }}"
            state: "present"
            name: "{{ stackname }}"
            template: "{{ playbook_dir }}/../files/caasp-stack.yaml"
            parameters:
              image: "{{ deploy_on_openstack_caasp_image }}"
              external_net: "{{ deploy_on_openstack_external_network }}"
              internal_network: "{{ deploy_on_openstack_internal_network }}"
              internal_subnet: "{{ deploy_on_openstack_internal_subnet }}"
              security_group: "{{ deploy_on_openstack_caasp_securitygroup }}"
              keypair: "{{ deploy_on_openstack_keypairname }}"
              worker_count: "{{ deploy_on_openstack_caasp_workers }}"

        # TODO(evrardjp): Replace this with stack output
        - name: Get workers details
          command: openstack server list --name {{ stackname }}-worker -c ID -c Name -c Networks -f json --noindent
          register: _workermachines
          changed_when: false
          failed_when: _workermachines.stdout == '[]'

        - name: Get admin details
          command: openstack server list --name {{ stackname }}-admin -c ID -c Name -c Networks -f json --noindent
          register: _adminmachines
          changed_when: false
          failed_when: _adminmachines.stdout == '[]'

        - name: Get master details
          command: openstack server list --name {{ stackname }}-master -c ID -c Name -c Networks -f json --noindent
          register: _mastermachines
          changed_when: false
          failed_when: _mastermachines.stdout == '[]'

        - name: Set the list of IDs per type of machine.
          set_fact:
            workers: "{{ _workermachines.stdout | from_json }}"
            admins: "{{ _adminmachines.stdout | from_json }}"
            masters: "{{ _mastermachines.stdout | from_json }}"

        # TODO(evrardjp): Replace with stack outputs
        - name: List IDs
          set_fact:
            workerids: "{{ workers | json_query('[*].ID') }}"
            adminids: "{{ admins | json_query('[*].ID') }}"
            masterids: "{{ masters | json_query('[*].ID') }}"

        - name: Run the caasp tooling
          shell: |
            # compatibility for caasp tooling requires the creation of ssh key
            if [ ! -d ../misc-files/ ]; then
                mkdir ../misc-files
            fi
            if [ ! -f ../misc-files/id_shared ]; then
                ssh-keygen -b 2048 -t rsa -f ../misc-files/id_shared -N ""
            fi
            ./tools/generate-environment {{ stackname | quote }}
            ./misc-tools/generate-ssh-config environment.json
            PYTHONUNBUFFERED=1 "./misc-tools/wait-for-velum" https://$(jq -r '.dashboardExternalHost' environment.json)
            cp environment.json {{ socok8s_caasp_environment_details }}
          args:
            chdir: "{{ playbook_dir }}/../files/"
            executable: /bin/bash

        # TODO(evrardjp): Parse the heat output when the heat template has changed
        - name: Port security disable on ports
          shell: |
            ## Get ports from instances IDs
            serverports=$(openstack port list --server {{ item | quote }} -c ID -f value)
            for port in $serverports; do
                ## Disable port security on those pesky instances
                openstack port set ${port} --no-security-group --disable-port-security
            done
          loop: "{{ workerids + adminids + masterids }}"
          args:
            chdir: "{{ playbook_dir }}/../files/"
            executable: /bin/bash

        - name: Extend inventory in workspace with newly created caasp nodes
          copy:
            content: "{{ caasp_overrides }}"
            dest: "{{ socok8s_workspace }}/inventory/caasp.yml"
          vars:
            caasp_overrides: |
              caasp-admin:
                hosts:
              {% for node in admins %}
                  {{ node.Name }}:
                    ansible_host: {{ node.Networks.split(',')[-1].replace(' ','') }}
              {% endfor %}

              caasp-masters:
                hosts:
              {% for node in masters %}
                  {{ node.Name }}:
                    ansible_host: {{ node.Networks.split(',')[-1].replace(' ','') }}
              {% endfor %}

              caasp-workers:
                hosts:
              {% for node in workers %}
                  {{ node.Name }}:
                    ansible_host: {{ node.Networks.split(',')[-1].replace(' ','') }}
              {% endfor %}

              airship-openstack-control-workers:
                hosts: &firsttwoworkers
              {% for node in workers %}{% if loop.index <= 2 %}
                  {{ node.Name }}:
                    ansible_host: {{ node.Networks.split(',')[-1].replace(' ','') }}
              {% if loop.first %}
                    primary: yes
              {% endif %}
              {% endif %}
              {% endfor %}

              airship-ucp-workers:
                hosts: *firsttwoworkers

              airship-openstack-compute-workers:
                hosts:
              {% for node in workers %}
              {% if loop.index == 3 %}
                  {{ node.Name }}:
                    ansible_host: {{ node.Networks.split(',')[-1].replace(' ','') }}
              {% if loop.first %}
                    primary: yes
              {% endif %}
              {% endif %}
              {% endfor %}

              airship-kube-system-workers:
                hosts: *firsttwoworkers

        - meta: refresh_inventory

        - name: Get pubkey, and add it to known hosts
          command: "ssh-keyscan -H {{ hostvars[item]['ansible_host'] | quote }}"
          register: _caaspsshkeys
          retries: 25
          delay: 10
          until: _caaspsshkeys.stdout and _caaspsshkeys.stdout.strip()
          loop: "{{ groups['caasp-admin'] + groups['caasp-masters'] + groups['caasp-workers'] }}"


        - name: Insert known host
          known_hosts:
            state: present
            name: "{{ hostvars[item.item]['ansible_host'] }}"
            key: "{{ item.stdout }}"
          loop: "{{ _caaspsshkeys.results }}"
